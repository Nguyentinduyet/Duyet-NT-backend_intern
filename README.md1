Day3

Module trong NestJS l√† g√¨? T·∫°i sao n√≥ quan tr·ªçng?
  Trong NestJS, m·ªôt module l√† m·ªôt ƒë∆°n v·ªã t·ªï ch·ª©c m√£ ngu·ªìn, gi√∫p nh√≥m c√°c th√†nh ph·∫ßn (components), d·ªãch v·ª• (services), b·ªô ƒëi·ªÅu khi·ªÉn (controllers), v√† c√°c provider c√≥ li√™n quan l·∫°i v·ªõi nhau ƒë·ªÉ t·∫°o th√†nh m·ªôt kh·ªëi ch·ª©c nƒÉng ho√†n ch·ªânh.
  M·ªói module trong NestJS l√† m·ªôt class ƒë∆∞·ª£c trang tr√≠ b·∫±ng @Module() decorator, c√≥ nhi·ªám v·ª• khai b√°o v√† qu·∫£n l√Ω c√°c th√†nh ph·∫ßn b√™n trong n√≥. ·ªï ch·ª©c m√£ ngu·ªìn t·ªët h∆°n:
    Gi√∫p chia nh·ªè ·ª©ng d·ª•ng th√†nh c√°c kh·ªëi ch·ª©c nƒÉng ri√™ng bi·ªát, d·ªÖ b·∫£o tr√¨ v√† m·ªü r·ªông. D·ªÖ d√†ng t√°i s·ª≠ d·ª•ng:
    C√°c module c√≥ th·ªÉ ƒë∆∞·ª£c t√°i s·ª≠ d·ª•ng ·ªü nhi·ªÅu n∆°i kh√°c nhau trong ·ª©ng d·ª•ng ho·∫∑c th·∫≠m ch√≠ trong c√°c d·ª± √°n kh√°c. Qu·∫£n l√Ω ph·ª• thu·ªôc d·ªÖ d√†ng:
  NestJS s·ª≠ d·ª•ng Dependency Injection (DI), module gi√∫p ki·ªÉm so√°t v√† qu·∫£n l√Ω c√°c provider m·ªôt c√°ch hi·ªáu qu·∫£. TƒÉng c∆∞·ªùng t√≠nh module h√≥a:
  Cho ph√©p import/export c√°c d·ªãch v·ª• gi·ªØa c√°c module m√† kh√¥ng b·ªã tr√πng l·∫∑p ho·∫∑c xung ƒë·ªôt. H·ªó tr·ª£ ki·∫øn tr√∫c Microservices:
    Trong c√°c h·ªá th·ªëng l·ªõn, vi·ªác t·ªï ch·ª©c theo module gi√∫p chia t√°ch ·ª©ng d·ª•ng th√†nh c√°c ph·∫ßn nh·ªè c√≥ th·ªÉ tri·ªÉn khai ƒë·ªôc l·∫≠p.
S·ª± kh√°c bi·ªát gi·ªØa @Module(), @Global(), v√† @Injectable()?
  @Module(): D√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a m·ªôt module, gi√∫p nh√≥m c√°c th√†nh ph·∫ßn nh∆∞ controllers, services, providers l·∫°i v·ªõi nhau.
  @Global(): Bi·∫øn m·ªôt module th√†nh to√†n c·ª•c, gi√∫p c√°c provider b√™n trong c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü b·∫•t k·ª≥ ƒë√¢u m√† kh√¥ng c·∫ßn import l·∫°i.
  @Injectable(): ƒê√°nh d·∫•u m·ªôt class c√≥ th·ªÉ ƒë∆∞·ª£c inject v√†o n∆°i kh√°c, th∆∞·ªùng d√πng cho services ho·∫∑c providers.
L√†m th·∫ø n√†o ƒë·ªÉ import v√† export c√°c providers gi·ªØa c√°c module?
  ƒê·ªÉ s·ª≠ d·ª•ng m·ªôt provider t·ª´ module kh√°c, b·∫°n c·∫ßn export provider ƒë√≥ t·ª´ module g·ªëc b·∫±ng exports[] v√† import module ƒë√≥ v√†o module c·∫ßn d√πng b·∫±ng imports[]. N·∫øu mu·ªën provider c√≥ th·ªÉ d√πng ·ªü m·ªçi module m√† kh√¥ng c·∫ßn import l·∫°i, s·ª≠ d·ª•ng @Global(). Ch·ªâ export nh·ªØng provider th·ª±c s·ª± c·∫ßn thi·∫øt ƒë·ªÉ tr√°nh d∆∞ th·ª´a.
Controller trong NestJS ƒë√≥ng vai tr√≤ g√¨?
  Trong NestJS, Controller ƒë√≥ng vai tr√≤ ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω c√°c y√™u c·∫ßu HTTP (request) t·ª´ client v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi (response). N√≥ ho·∫°t ƒë·ªông nh∆∞ m·ªôt "c·∫ßu n·ªëi" gi·ªØa client v√† business logic c·ªßa ·ª©ng d·ª•ng.
C√°ch s·ª≠ d·ª•ng c√°c decorator nh∆∞ @Get(), @Post(), @Param(), v√† @Body()?
  Trong NestJS, c√°c decorator nh∆∞ @Get(), @Post(), @Param(), v√† @Body() gi√∫p x·ª≠ l√Ω request v√† l·∫•y d·ªØ li·ªáu t·ª´ client.
    @Get(): X·ª≠ l√Ω GET request, th∆∞·ªùng d√πng ƒë·ªÉ l·∫•y d·ªØ li·ªáu.
    @Post(): X·ª≠ l√Ω POST request, th∆∞·ªùng d√πng ƒë·ªÉ t·∫°o m·ªõi d·ªØ li·ªáu.
    @Param(): L·∫•y d·ªØ li·ªáu t·ª´ URL parameters (v√≠ d·ª•: /users/:id).
    @Body(): L·∫•y d·ªØ li·ªáu t·ª´ request body, th∆∞·ªùng d√πng trong POST/PUT request.
Provider trong NestJS l√† g√¨? C√≥ nh·ªØng lo·∫°i provider n√†o?
  Trong NestJS, Provider l√† c√°c class c√≥ th·ªÉ ƒë∆∞·ª£c inject (ti√™m v√†o) v√†o c√°c th√†nh ph·∫ßn kh√°c nh∆∞ Controllers, Services, Repositories, gi√∫p t·ªï ch·ª©c v√† t√°i s·ª≠ d·ª•ng logic trong ·ª©ng d·ª•ng. üîπ Provider c√≥ th·ªÉ l√†:
  Service (ch·ª©a business logic).
  Repository (x·ª≠ l√Ω d·ªØ li·ªáu, th∆∞·ªùng d√πng v·ªõi database).
  Factory (t·∫°o ra m·ªôt gi√° tr·ªã ho·∫∑c ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ).
  Custom Provider (provider t√πy ch·ªânh).
S·ª± kh√°c bi·ªát gi·ªØa @Injectable() v√† @Inject()?
  @Injectable() ƒê√°nh d·∫•u m·ªôt class l√† provider ƒë·ªÉ c√≥ th·ªÉ ƒë∆∞·ª£c inject v√†o n∆°i kh√°c.
  @Inject() D√πng ƒë·ªÉ inject m·ªôt provider c·ª• th·ªÉ v√†o m·ªôt class khi NestJS kh√¥ng t·ª± ƒë·ªông nh·∫≠n di·ªán ƒë∆∞·ª£c
Middleware l√† g√¨?
  Middleware trong NestJS l√† c√°c h√†m trung gian ch·∫°y tr∆∞·ªõc khi request ƒë·∫øn Controller. N√≥ c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu, x√°c th·ª±c, ghi log, ho·∫∑c ch·ªânh s·ª≠a request/response tr∆∞·ªõc khi ti·∫øp t·ª•c.
L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o m·ªôt custom middleware trong NestJS?
  Middleware trong NestJS l√† m·ªôt class tri·ªÉn khai NestMiddleware v√† c√≥ ph∆∞∆°ng th·ª©c use() ƒë·ªÉ x·ª≠ l√Ω request.
  Middleware ph·∫£i ƒë∆∞·ª£c ƒëƒÉng k√Ω b·∫±ng MiddlewareConsumer trong configure() c·ªßa Module.
  B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω Middleware trong main.ts ƒë·ªÉ n√≥ ch·∫°y cho to√†n b·ªô API.
  N·∫øu ch·ªâ mu·ªën Middleware ch·∫°y cho m·ªôt s·ªë route nh·∫•t ƒë·ªãnh, c√≥ th·ªÉ s·ª≠ d·ª•ng .forRoutes() v·ªõi c·∫•u h√¨nh c·ª• th·ªÉ.
NestJS cung c·∫•p nh·ªØng built-in middleware n√†o?
  NestJS kh√¥ng c√≥ nhi·ªÅu built-in middleware (Middleware c√≥ s·∫µn) nh∆∞ Express, nh∆∞ng v√¨ NestJS s·ª≠ d·ª•ng Express ho·∫∑c Fastify l√†m HTTP adapter, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c middleware t·ª´ Express ho·∫∑c Fastify tr·ª±c ti·∫øp trong NestJS.
C√°ch s·ª≠ d·ª•ng middleware trong NestJS?
  Middleware trong NestJS l√† m·ªôt h√†m trung gian ch·∫°y tr∆∞·ªõc khi request ƒë·∫øn Controller v√† tr∆∞·ªõc khi response tr·∫£ v·ªÅ client. N√≥ th∆∞·ªùng d√πng ƒë·ªÉ:
    X√°c th·ª±c request (Auth Middleware)
    Ghi log request (Logger Middleware)
    Ch·∫∑n IP ho·∫∑c gi·ªõi h·∫°n request (Rate Limiting)
    Thay ƒë·ªïi d·ªØ li·ªáu request tr∆∞·ªõc khi v√†o Controller
    T√≠ch h·ª£p c√°c th∆∞ vi·ªán Express Middleware (CORS, Helmet, Compression,...)
Dependency Injection (DI) l√† g√¨?
  Dependency Injection (DI) l√† m·ªôt m√¥ h√¨nh thi·∫øt k·∫ø (design pattern) gi√∫p t√°ch bi·ªát vi·ªác kh·ªüi t·∫°o ph·ª• thu·ªôc (dependencies) kh·ªèi logic c·ªßa class. Trong NestJS, DI gi√∫p qu·∫£n l√Ω v√† cung c·∫•p c√°c ph·ª• thu·ªôc (providers) m·ªôt c√°ch t·ª± ƒë·ªông, thay v√¨ ph·∫£i kh·ªüi t·∫°o th·ªß c√¥ng.
Lifecycle Hooks trong Nestjs l√† g√¨?
